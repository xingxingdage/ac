<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP请求默认值" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">10.10.112.161</stringProp>
        <stringProp name="HTTPSampler.port">8091</stringProp>
        <stringProp name="HTTPSampler.protocol">http</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        <stringProp name="HTTPSampler.implementation">Java</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="pubSecretKey" elementType="Argument">
            <stringProp name="Argument.name">pubSecretKey</stringProp>
            <stringProp name="Argument.value">&quot;C3F1E6B25312648DDF122DB8&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">公共密钥</stringProp>
          </elementProp>
          <elementProp name="agentSecretKey" elementType="Argument">
            <stringProp name="Argument.name">agentSecretKey</stringProp>
            <stringProp name="Argument.value">&quot;07DDB7DF84BE3EC09EDFE094&quot;</stringProp>
            <stringProp name="Argument.desc">商家密钥</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DES3" elementType="Argument">
            <stringProp name="Argument.name">DES3</stringProp>
            <stringProp name="Argument.value">&quot;zhongxinyinhang123456789&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="agentID" elementType="Argument">
            <stringProp name="Argument.name">agentID</stringProp>
            <stringProp name="Argument.value">00003</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">商家ID，投注站代彩民充值37210102</stringProp>
          </elementProp>
          <elementProp name="teminalID" elementType="Argument">
            <stringProp name="Argument.name">teminalID</stringProp>
            <stringProp name="Argument.value">&quot;3790201700001&quot;</stringProp>
            <stringProp name="Argument.desc">自助终端ID</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userID" elementType="Argument">
            <stringProp name="Argument.name">userID</stringProp>
            <stringProp name="Argument.value">&quot;3780000000175&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="用表格察看结果" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="聚合报告" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="自助终端内部接口" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1450834515000</longProp>
        <longProp name="ThreadGroup.end_time">1450834515000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="登录" enabled="true"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="自助终端登录CSV" enabled="true">
            <stringProp name="filename">F:\jmeter_csv\JMeter自助终端登录.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">userID,loginpass,macaddress</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="自助终端登录" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="agentid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${agentID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">agentid</stringProp>
                </elementProp>
                <elementProp name="paramcontent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${paramcontent}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">paramcontent</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/access/api/agent/loginDtk.action</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.sinodata.forJMeter.JsonJiaJieMi;
import net.sf.json.JSONObject;

JSONObject jo = new JSONObject();
jo.put(&quot;userid&quot;,&quot;${userID}&quot;);
jo.put(&quot;loginpass&quot;,${loginpass});
jo.put(&quot;macaddress&quot;,&quot;${macaddress}&quot;);


//对拼装后的参数值进行加密操作
JsonJiaJieMi jj = new JsonJiaJieMi(${agentSecretKey},${DES3});
String paramcontent;
try {
    log.info(&quot;请求加密前，paramcontent=&quot;+jo.toString());
    paramcontent = jj.jiaMi(jo.toString());
}catch (Throwable ex) {
    log.error(&quot;Failed to do this or that&quot;, ex);
}

//将加密后获取到的字符串保存到JMeter变量中，供参数化使用
vars.put(&quot;paramcontent&quot;,paramcontent);
log.info(&quot;paramcontent=&quot;+paramcontent);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.sinodata.forJMeter.JsonJiaJieMi;

//获取HTTP请求的响应内容
loginResponse = prev.getResponseDataAsString();

//对响应内容进行解密操作
JsonJiaJieMi jj = new JsonJiaJieMi(${agentSecretKey},${DES3});
String strTmp;
try {
    strTmp = jj.jieMi(loginResponse);
}
catch (Throwable ex) {
    log.error(&quot;Failed to do this or that&quot;, ex);
}
log.info(&quot;解密后：&quot; + strTmp);

//截取解密后的字符串，以得到登录的loginsession
loginsession = strTmp.substring(strTmp.length()-34,strTmp.length()-2);
vars.put(&quot;loginsession&quot;,loginsession);

String login_tradestatus = strTmp.substring(16,22);
log.info(&quot;login_tradestatus:&quot;+login_tradestatus);
vars.put(&quot;login_tradestatus&quot;,login_tradestatus);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">String str = vars.get(&quot;login_tradestatus&quot;);
if(!&quot;100000&quot;.equals(str)){
	Failure = true;
	FailureMessage = &quot;自助终端登录失败，失败返回码：&quot; + str;
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="自购投注（有纸化自助终端）" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">18</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="自购投注CSV" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">F:\jmeter_csv\JMeter自助终端自购投注.csv</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">accesstype,playename,selltermcode,money,drawway,ticketcode</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="自购投注" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="agentid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${agentID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">agentid</stringProp>
                </elementProp>
                <elementProp name="paramcontent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${paramcontent}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">paramcontent</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/access/api/agent/teminalBetTakeEffectDtk.action</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.sinodata.forJMeter.JsonJiaJieMi;
import com.sinodata.forJMeter.UtilsList;

//从CSV文件中获取参数值
accesstype = ${accesstype};
playename = ${playename};
selltermcode = ${selltermcode};
money = ${money};
drawway = ${drawway};
agentid = &quot;${agentID}&quot;;
log.info(&quot;======&quot; + agentid);
userid = &quot;${userID}&quot;;
log.info(&quot;======&quot; + userid);
loginsession = vars.get(&quot;loginsession&quot;);

//生成随机投注订单号(由投注商生成，唯一)
UtilsList ul = new UtilsList();
String runcode = ul.getRunCode()+${__Random(0001,9999,)};
log.info(&quot;==============&quot; + runcode);

StringBuffer sb = new StringBuffer();
tmp = ${ticketcode};
sb.append(runcode).append(&quot;\t&quot;).append(tmp);
ticketcode = sb.toString();

//校验码(思乐公司提供校验函数，输入值：投注流水号、投注商ID、用户ID、注码数据区、总金额、动态sessionid)
log.info(&quot;(runcode+agentid+userid+ticketcode+money+loginsession)=&quot;+(runcode+agentid+userid+ticketcode+money+loginsession));
String checkcode = ul.getCheckCode(runcode+agentid+userid+ticketcode+money+loginsession);
//将参数值拼装
StringBuffer sbTmp = new StringBuffer();
			sbTmp.append(&quot;{\&quot;runcode\&quot;:\&quot;&quot;).append(runcode).append(&quot;\&quot;,\&quot;&quot;);
			sbTmp.append(&quot;userid\&quot;:\&quot;&quot;).append(userid).append(&quot;\&quot;,\&quot;&quot;);
			sbTmp.append(&quot;accesstype\&quot;:\&quot;&quot;).append(accesstype).append(&quot;\&quot;,\&quot;&quot;);
			sbTmp.append(&quot;playename\&quot;:\&quot;&quot;).append(playename).append(&quot;\&quot;,\&quot;&quot;);
			sbTmp.append(&quot;selltermcode\&quot;:\&quot;&quot;).append(selltermcode).append(&quot;\&quot;,\&quot;&quot;);
			sbTmp.append(&quot;loginsession\&quot;:\&quot;&quot;).append(loginsession).append(&quot;\&quot;,\&quot;&quot;);
			sbTmp.append(&quot;money\&quot;:\&quot;&quot;).append(money).append(&quot;\&quot;,\&quot;&quot;);
			sbTmp.append(&quot;drawway\&quot;:\&quot;&quot;).append(drawway).append(&quot;\&quot;,\&quot;&quot;);
			sbTmp.append(&quot;checkcode\&quot;:\&quot;&quot;).append(checkcode).append(&quot;\&quot;,\&quot;&quot;);
			sbTmp.append(&quot;ticketcode\&quot;:\&quot;&quot;).append(ticketcode).append(&quot;\&quot;,\&quot;&quot;);
			sbTmp.append(&quot;promolist\&quot;:&quot;).append(&quot;[]&quot;);
			sbTmp.append(&quot;}&quot;);
log.info(&quot;sbTmp=&quot;+sbTmp.toString());

//对拼装后的参数值进行加密操作
JsonJiaJieMi jj = new JsonJiaJieMi(${agentSecretKey},${DES3});
String paramcontent;
try {
    paramcontent = jj.jiaMi(sbTmp.toString());
}

catch (Throwable ex) {
    log.error(&quot;Failed to do this or that&quot;, ex);
}

//将加密后获取到的字符串保存到JMeter变量中，供参数化使用
vars.put(&quot;paramcontent&quot;,paramcontent);
log.info(&quot;paramcontent=&quot;+paramcontent);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.sinodata.forJMeter.JsonJiaJieMi;

//获取HTTP请求的响应内容
loginResponse = prev.getResponseDataAsString();

//对响应内容进行解密操作
JsonJiaJieMi jj = new JsonJiaJieMi(${agentSecretKey},${DES3});
String strTmp;
try {
    strTmp = jj.jieMi(loginResponse);
}
catch (Throwable ex) {
    log.error(&quot;Failed to do this or that&quot;, ex);
}
log.info(&quot;解密后：&quot; + strTmp);
//截取解密字符串后的返回码
String onebet_tradestatus = strTmp.substring(16,22);
vars.put(&quot;onebet_tradestatus&quot;,onebet_tradestatus);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">String str = vars.get(&quot;onebet_tradestatus&quot;);
if(!&quot;100000&quot;.equals(str)){
	Failure = true;
	FailureMessage = &quot;自购投注失败，失败返回码：&quot; + str;
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="生成支付二维码(有纸化自助终端)" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.1.2.1.充值下单(自助终端)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="agentid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${agentID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">agentid</stringProp>
                </elementProp>
                <elementProp name="paramcontent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${paramcontent}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">paramcontent</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/access/api/agent/hallBankRechar.action</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1950315510">agentSecretKey</stringProp>
                <stringProp name="104079552">money</stringProp>
                <stringProp name="100499171">ishot</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="2008233690">
                  <stringProp name="-1009289327">&quot;10D00B69B6C5C4ECDF095C89&quot;</stringProp>
                  <stringProp name="32936945">&quot;201&quot;</stringProp>
                  <stringProp name="34227">&quot;1&quot;</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.sinodata.forJMeter.JsonJiaJieMi;
import net.sf.json.JSONObject;

JSONObject jo = new JSONObject();
//jo.put(&quot;loginsession&quot;,&quot;32D262D19B7D047FB796BF343FAFA371&quot;);
jo.put(&quot;userid&quot;,${userID});
jo.put(&quot;money&quot;,${money});
jo.put(&quot;loginsession&quot;,&quot;${loginsession}&quot;);
jo.put(&quot;ishot&quot;,${ishot});
log.info(&quot;请求加密前paramcontent=&quot; + jo.toString());

//对拼装后的参数值进行加密操作
JsonJiaJieMi jj = new JsonJiaJieMi(${agentSecretKey},${DES3});
String paramcontent;
try {
    paramcontent = jj.jiaMi(jo.toString());
}

catch (Throwable ex) {
    log.error(&quot;Failed to do this or that&quot;, ex);
}

//将加密后获取到的字符串保存到JMeter变量中，供参数化使用
vars.put(&quot;paramcontent&quot;,paramcontent);
log.info(&quot;请求加密后paramcontent=&quot;+paramcontent);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.sinodata.forJMeter.JsonJiaJieMi;
import net.sf.json.JSONObject;

//获取HTTP请求的响应内容
hallBankRecharResponse = prev.getResponseDataAsString();
log.info(&quot;响应解密前：&quot; + hallBankRecharResponse);
//对响应内容进行解密操作
JsonJiaJieMi jj = new JsonJiaJieMi(${agentSecretKey},${DES3});
String strTmp;
try {
    strTmp = jj.jieMi(hallBankRecharResponse);
}
catch (Throwable ex) {
    log.error(&quot;Failed to do this or that&quot;, ex);
}
log.info(&quot;响应解密后：&quot; + strTmp);

String hallBankRechar_tradestatus = new JSONObject().fromObject(strTmp).getString(&quot;tradestatus&quot;);
log.info(&quot;hallBankRechar_tradestatus:&quot;+hallBankRechar_tradestatus);
vars.put(&quot;hallBankRechar_tradestatus&quot;,hallBankRechar_tradestatus);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">String str = vars.get(&quot;hallBankRechar_tradestatus&quot;);
if(!&quot;100000&quot;.equals(str)){
	Failure = true;
	FailureMessage = &quot;充值下单(自助终端)失败，失败返回码：&quot; + str;
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="数据库中获取指定玩法、指定期号的票号进行兑奖" enabled="false"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="dataSource">sybase112160</stringProp>
            <stringProp name="dbUrl">jdbc:sybase:Tds:10.10.112.160:5000/zz_unity_sell</stringProp>
            <stringProp name="driver">com.sybase.jdbc3.jdbc.SybDriver</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="password">123456</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <stringProp name="username">sa</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
            <stringProp name="dataSource">sybase112160</stringProp>
            <stringProp name="query">select ticket_code from unity_agent_sell where sell_status = 2 and play_ename = &apos;${playEname}&apos;  and term_code = &apos;${termCode}&apos; and user_id = &apos;${userID}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">10000</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">ticketCodeArray</stringProp>
            <stringProp name="variableNames">ticketCode</stringProp>
          </JDBCSampler>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1901714020">playEname</stringProp>
                <stringProp name="-1182379911">termCode</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1337966456">
                  <stringProp name="2286856">K520</stringProp>
                  <stringProp name="1270973257">0702002</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="删除旧文件encashResult.csv" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.File;

File f = new File(&quot;encashResult.csv&quot;);
if(f.exists()){
	f.delete();
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
            <stringProp name="ForeachController.inputVal">ticketCode</stringProp>
            <stringProp name="ForeachController.returnVal">ticketcode</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
            <stringProp name="ForeachController.startIndex">0</stringProp>
            <stringProp name="ForeachController.endIndex">${ticketCode_#}</stringProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="兑奖" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="agentid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${agentID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">agentid</stringProp>
                  </elementProp>
                  <elementProp name="paramcontent" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${paramcontent}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">paramcontent</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/access/api/agent/teminalCashDtk.action</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="false">
                <collectionProp name="UserParameters.names">
                  <stringProp name="2089988857">ticketcode</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1848440592">
                    <stringProp name="-66989366">08c1f887e055e7352611</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import com.sinodata.forJMeter.JsonJiaJieMi;
import com.sinodata.forJMeter.UtilsList;
import net.sf.json.JSONObject;

ticketcode = &quot;${ticketcode}&quot;;
agentid = &quot;${agentID}&quot;;
log.info(&quot;======&quot; + agentid);
String userid = &quot;${userID}&quot;;
log.info(&quot;======&quot; + userid);
loginsession = vars.get(&quot;loginsession&quot;);


//校验码(思乐公司提供校验函数，输入值：用户ID、票号)
log.info(&quot;(userid+ticketcode)=&quot;+(userid+ticketcode));
UtilsList ul = new UtilsList();
String checkcode = ul.getCheckCode(userid+ticketcode);
//将参数值拼装

JSONObject jo = new JSONObject();
jo.put(&quot;userid&quot;,userid);
jo.put(&quot;ticketcode&quot;,ticketcode);
jo.put(&quot;checkcode&quot;,checkcode);
jo.put(&quot;loginsession&quot;,loginsession);
String data = jo.toString();

log.info(&quot;data=&quot;+data);

//对拼装后的参数值进行加密操作
JsonJiaJieMi jj = new JsonJiaJieMi(${agentSecretKey},${DES3});
String paramcontent;
try {
    paramcontent = jj.jiaMi(data);
}

catch (Throwable ex) {
    log.error(&quot;Failed to do this or that&quot;, ex);
}

//将加密后获取到的字符串保存到JMeter变量中，供参数化使用
vars.put(&quot;paramcontent&quot;,paramcontent);
log.info(&quot;paramcontent=&quot;+paramcontent);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import com.sinodata.forJMeter.JsonJiaJieMi;
import java.io.File;

//获取HTTP请求的响应内容
encashResponse = prev.getResponseDataAsString();

//对响应内容进行解密操作
JsonJiaJieMi jj = new JsonJiaJieMi(${agentSecretKey},${DES3});
String strTmp;
try {
    strTmp = jj.jieMi(encashResponse);
}
catch (Throwable ex) {
    log.error(&quot;Failed to do this or that&quot;, ex);
}
log.info(&quot;解密后：&quot; + strTmp);
//截取解密字符串后的返回码
String encash_tradestatus = strTmp.substring(16,22);
vars.put(&quot;encash_tradestatus&quot;,encash_tradestatus);
 
File f = new File(&quot;encashResult.csv&quot;);
if(!f.exists()){
	f.createNewFile();
}
FileWriter fw = new FileWriter(f,true);
fw.write(strTmp);
fw.write(&quot;\r\n&quot;);
fw.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String str = vars.get(&quot;encash_tradestatus&quot;);
if(!&quot;100000&quot;.equals(str)){
	Failure = true;
	FailureMessage = &quot;兑奖失败，失败返回码：&quot; + str;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="单张票兑奖" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="兑奖" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="agentid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${agentID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">agentid</stringProp>
                </elementProp>
                <elementProp name="paramcontent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${paramcontent}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">paramcontent</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/access/api/agent/teminalCashDtk.action</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2089988857">ticketcode</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-553428578">
                  <stringProp name="988431237">34a067675be7f731ef59</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import com.sinodata.forJMeter.JsonJiaJieMi;
import com.sinodata.forJMeter.UtilsList;
import net.sf.json.JSONObject;

ticketcode = &quot;${ticketcode}&quot;;
agentid = &quot;${agentID}&quot;;
log.info(&quot;======&quot; + agentid);
String userid = &quot;${userID}&quot;;
log.info(&quot;======&quot; + userid);
loginsession = vars.get(&quot;loginsession&quot;);


//校验码(思乐公司提供校验函数，输入值：用户ID、票号)
log.info(&quot;(userid+ticketcode)=&quot;+(userid+ticketcode));
UtilsList ul = new UtilsList();
String checkcode = ul.getCheckCode(userid+ticketcode);
//将参数值拼装

JSONObject jo = new JSONObject();
jo.put(&quot;userid&quot;,userid);
jo.put(&quot;ticketcode&quot;,ticketcode);
jo.put(&quot;checkcode&quot;,checkcode);
jo.put(&quot;loginsession&quot;,loginsession);
String data = jo.toString();

log.info(&quot;data=&quot;+data);

//对拼装后的参数值进行加密操作
JsonJiaJieMi jj = new JsonJiaJieMi(${agentSecretKey},${DES3});
String paramcontent;
try {
    paramcontent = jj.jiaMi(data);
}

catch (Throwable ex) {
    log.error(&quot;Failed to do this or that&quot;, ex);
}

//将加密后获取到的字符串保存到JMeter变量中，供参数化使用
vars.put(&quot;paramcontent&quot;,paramcontent);
log.info(&quot;paramcontent=&quot;+paramcontent);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.sinodata.forJMeter.JsonJiaJieMi;
import java.io.File;

//获取HTTP请求的响应内容
encashResponse = prev.getResponseDataAsString();

//对响应内容进行解密操作
JsonJiaJieMi jj = new JsonJiaJieMi(${agentSecretKey},${DES3});
String strTmp;
try {
    strTmp = jj.jieMi(encashResponse);
}
catch (Throwable ex) {
    log.error(&quot;Failed to do this or that&quot;, ex);
}
log.info(&quot;解密后：&quot; + strTmp);
//截取解密字符串后的返回码
String encash_tradestatus = strTmp.substring(16,22);
vars.put(&quot;encash_tradestatus&quot;,encash_tradestatus);
 
File f = new File(&quot;encashResult.csv&quot;);
if(!f.exists()){
	f.createNewFile();
}
FileWriter fw = new FileWriter(f,true);
fw.write(strTmp);
fw.write(&quot;\r\n&quot;);
fw.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">String str = vars.get(&quot;encash_tradestatus&quot;);
if(!&quot;100000&quot;.equals(str)){
	Failure = true;
	FailureMessage = &quot;兑奖失败，失败返回码：&quot; + str;
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConfigTestElement guiclass="ObsoleteGui" testclass="ConfigTestElement" testname="SOAP/XML-RPC Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SoapSampler.URL_DATA"></stringProp>
          <stringProp name="HTTPSamper.xml_data"></stringProp>
          <stringProp name="SoapSampler.xml_data_file"></stringProp>
          <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
          <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
        </ConfigTestElement>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="商家接口" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1475911943000</longProp>
        <longProp name="ThreadGroup.end_time">1475911943000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1795632125">partnerId</stringProp>
            <stringProp name="1919321041">ipAndPort</stringProp>
            <stringProp name="-1872161348">playename</stringProp>
            <stringProp name="-1181426599">termcode</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-58399187">
              <stringProp name="1530360049">&quot;00003&quot;</stringProp>
              <stringProp name="27667942">&quot;10.10.112.161:8091&quot;</stringProp>
              <stringProp name="1044283704">&quot;K520&quot;</stringProp>
              <stringProp name="1217180357">20180702003</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="6.1.2.1.新期查询" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="新期查询" enabled="true">
            <stringProp name="BeanShellSampler.query">import net.sf.json.JSONObject;
import com.sinodata.forJMeter.ThreeDES;
import com.sinodata.forJMeter.MD5Security;

JSONObject jo = new JSONObject();
jo.put(&quot;playename&quot;,${playename});
String data = jo.toString();

ThreeDES des = new ThreeDES(${agentSecretKey});

byte[] byteArrayData = des.encryptMode(data.getBytes(),${agentSecretKey});
String hash = MD5Security.getMD5String(byteArrayData);

String url = &quot;http://&quot; + ${ipAndPort} + &quot;/access/comm/agent/do?cmd=newTermQuery&amp;partnerId=&quot; + ${partnerId} +&quot;&amp;hashType=md5&amp;hash=&quot;+ hash;

URL urls = new URL(url);
HttpURLConnection uc = (HttpURLConnection) urls.openConnection();
uc.setRequestMethod(&quot;POST&quot;);
uc.setRequestProperty(&quot;content-type&quot;, &quot;multipart/form-data&quot;);
uc.setRequestProperty(&quot;charset&quot;, &quot;UTF-8&quot;);
uc.setDoOutput(true);
uc.setDoInput(true);

uc.setUseCaches(false);
uc.setReadTimeout(30000);
uc.setConnectTimeout(30000);
OutputStream os = uc.getOutputStream();
DataOutputStream dos = new DataOutputStream(os);
dos.write(byteArrayData);
dos.flush();
os.close();

InputStream inStrm = uc.getInputStream();
BufferedInputStream bis = new BufferedInputStream(inStrm);
ByteArrayOutputStream bAOutputStream = new ByteArrayOutputStream();
int ch;
while ((ch = bis.read()) != -1) {
	bAOutputStream.write(ch);
}
byte[] ret = bAOutputStream.toByteArray();
byte[] responseDataByteArray = des.decryptMode(ret,${agentSecretKey});

String responseData = new String(responseDataByteArray,&quot;UTF-8&quot;);
//注意IsSuccess、ResponseCode和ResponseMessage的赋值先后顺序，否则在结果树的响应数据看不到ResponseMessage
//IsSuccess引用它来断言BeanShell Sampler事务是否成功，如果设置为false，则在结果树中看到的就是红色
if(responseData != null){
	IsSuccess = true;
}else{
	IsSuccess = false;
}
//设置响应返回码，默认为&quot;200&quot;
ResponseCode = 200;
//设置响应内容，默认为&quot;OK&quot;
ResponseMessage = responseData;</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1478850739">&quot;tradestatus&quot;:&quot;100000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="6.1.2.2.开奖公告查询" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="开奖公告查询" enabled="true">
            <stringProp name="BeanShellSampler.query">import net.sf.json.JSONObject;
import com.sinodata.forJMeter.ThreeDES;
import com.sinodata.forJMeter.MD5Security;

JSONObject jo = new JSONObject();
jo.put(&quot;playename&quot;,${playename});
log.info(&quot;*******************************&quot;+ &quot;${termcode}&quot;);
jo.put(&quot;termcode&quot;,&quot;${termcode}&quot;);
String data = jo.toString();

ThreeDES des = new ThreeDES(${agentSecretKey});

byte[] byteArrayData = des.encryptMode(data.getBytes(),${agentSecretKey});
String hash = MD5Security.getMD5String(byteArrayData);

String url = &quot;http://&quot; + ${ipAndPort} + &quot;/access/comm/agent/do?cmd=priceQuery&amp;partnerId=&quot; + ${partnerId} +&quot;&amp;hashType=md5&amp;hash=&quot;+ hash;

URL urls = new URL(url);
HttpURLConnection uc = (HttpURLConnection) urls.openConnection();
uc.setRequestMethod(&quot;POST&quot;);
uc.setRequestProperty(&quot;content-type&quot;, &quot;multipart/form-data&quot;);
uc.setRequestProperty(&quot;charset&quot;, &quot;UTF-8&quot;);
uc.setDoOutput(true);
uc.setDoInput(true);

uc.setUseCaches(false);
uc.setReadTimeout(30000);
uc.setConnectTimeout(30000);
OutputStream os = uc.getOutputStream();
DataOutputStream dos = new DataOutputStream(os);
dos.write(byteArrayData);
dos.flush();
os.close();

InputStream inStrm = uc.getInputStream();
BufferedInputStream bis = new BufferedInputStream(inStrm);
ByteArrayOutputStream bAOutputStream = new ByteArrayOutputStream();
int ch;
while ((ch = bis.read()) != -1) {
	bAOutputStream.write(ch);
}
byte[] ret = bAOutputStream.toByteArray();
byte[] responseDataByteArray = des.decryptMode(ret,${agentSecretKey});

String responseData = new String(responseDataByteArray,&quot;UTF-8&quot;);
//注意IsSuccess、ResponseCode和ResponseMessage的赋值先后顺序，否则在结果树的响应数据看不到ResponseMessage
//IsSuccess引用它来断言BeanShell Sampler事务是否成功，如果设置为false，则在结果树中看到的就是红色
if(responseData != null){
	IsSuccess = true;
}else{
	IsSuccess = false;
}
//设置响应返回码，默认为&quot;200&quot;
ResponseCode = 200;
//设置响应内容，默认为&quot;OK&quot;
ResponseMessage = responseData;</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1478850739">&quot;tradestatus&quot;:&quot;100000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="6.1.2.3.时间同步" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="时间同步" enabled="true">
            <stringProp name="BeanShellSampler.query">import net.sf.json.JSONObject;
import com.sinodata.forJMeter.ThreeDES;
import com.sinodata.forJMeter.MD5Security;

JSONObject jo = new JSONObject();
String data = jo.toString();

ThreeDES des = new ThreeDES(${agentSecretKey});

byte[] byteArrayData = des.encryptMode(data.getBytes(),${agentSecretKey});
String hash = MD5Security.getMD5String(byteArrayData);

String url = &quot;http://&quot; + ${ipAndPort} + &quot;/access/comm/agent/do?cmd=synTime&amp;partnerId=&quot; + ${partnerId} +&quot;&amp;hashType=md5&amp;hash=&quot;+ hash;

URL urls = new URL(url);
HttpURLConnection uc = (HttpURLConnection) urls.openConnection();
uc.setRequestMethod(&quot;POST&quot;);
uc.setRequestProperty(&quot;content-type&quot;, &quot;multipart/form-data&quot;);
uc.setRequestProperty(&quot;charset&quot;, &quot;UTF-8&quot;);
uc.setDoOutput(true);
uc.setDoInput(true);

uc.setUseCaches(false);
uc.setReadTimeout(30000);
uc.setConnectTimeout(30000);
OutputStream os = uc.getOutputStream();
DataOutputStream dos = new DataOutputStream(os);
dos.write(byteArrayData);
dos.flush();
os.close();

InputStream inStrm = uc.getInputStream();
BufferedInputStream bis = new BufferedInputStream(inStrm);
ByteArrayOutputStream bAOutputStream = new ByteArrayOutputStream();
int ch;
while ((ch = bis.read()) != -1) {
	bAOutputStream.write(ch);
}
byte[] ret = bAOutputStream.toByteArray();
byte[] responseDataByteArray = des.decryptMode(ret,${agentSecretKey});

String responseData = new String(responseDataByteArray,&quot;UTF-8&quot;);
//注意IsSuccess、ResponseCode和ResponseMessage的赋值先后顺序，否则在结果树的响应数据看不到ResponseMessage
//IsSuccess引用它来断言BeanShell Sampler事务是否成功，如果设置为false，则在结果树中看到的就是红色
if(responseData != null){
	IsSuccess = true;
}else{
	IsSuccess = false;
}
//设置响应返回码，默认为&quot;200&quot;
ResponseCode = 200;
//设置响应内容，默认为&quot;OK&quot;
ResponseMessage = responseData;</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1478850739">&quot;tradestatus&quot;:&quot;100000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
